#!/usr/bin/env python3
"""
Script de migration vers le syst√®me de s√©curit√© simplifi√©
Mise √† jour des r√¥les et ajout des tables de s√©curit√©
"""

import sys
import os
from datetime import timedelta

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import create_engine, text
from app.core.config import settings
from app.core.database import Base
from app.models.permissions import ProjectPermission, ProjectRole
from app.core.security_logging import SecurityLog, SecurityEventType
from app.models.user import User
from app.models.project import Project


def update_security_system():
    """
    Met √† jour le syst√®me de s√©curit√© avec les 3 r√¥les simplifi√©s
    """
    print("üîÑ Mise √† jour du syst√®me de s√©curit√© vers les 3 r√¥les simplifi√©s")
    print("=" * 70)
    
    # Cr√©er le moteur de base de donn√©es
    engine = create_engine(settings.DATABASE_URL)
    
    try:
        # 1. Cr√©er les nouvelles tables
        print("1. üìä Cr√©ation des tables de s√©curit√©...")
        Base.metadata.create_all(
            bind=engine, 
            tables=[ProjectPermission.__table__, SecurityLog.__table__]
        )
        print("   ‚úÖ Tables cr√©√©es : project_permissions, security_logs")
        
        with engine.connect() as conn:
            trans = conn.begin()
            
            try:
                # 2. Migrer les permissions existantes
                print("\n2. üîÑ Migration des permissions existantes...")
                
                # Supprimer les anciennes permissions invalides (s'il y en a)
                conn.execute(text("DELETE FROM project_permissions WHERE role NOT IN ('admin', 'moderator', 'user')"))
                
                # R√©cup√©rer tous les projets
                projects_result = conn.execute(text("SELECT id, owner_id FROM projects"))
                projects = projects_result.fetchall()
                
                print(f"   üìÇ {len(projects)} projet(s) trouv√©(s)")
                
                for project_id, owner_id in projects:
                    # V√©rifier si le propri√©taire a d√©j√† une permission
                    existing = conn.execute(
                        text("SELECT id FROM project_permissions WHERE user_id = :user_id AND project_id = :project_id"),
                        {"user_id": owner_id, "project_id": project_id}
                    ).fetchone()
                    
                    if not existing:
                        # Cr√©er la permission admin pour le propri√©taire
                        conn.execute(
                            text("""
                                INSERT INTO project_permissions (
                                    user_id, project_id, role, granted_by_id, granted_at, is_active,
                                    can_view_project, can_view_datasets, can_view_comments,
                                    can_edit_project, can_delete_project, can_upload_datasets, can_delete_datasets,
                                    can_create_comments, can_edit_comments, can_delete_comments, can_moderate_comments,
                                    can_manage_users, can_export_data
                                ) VALUES (
                                    :user_id, :project_id, 'admin', :granted_by_id, NOW(), TRUE,
                                    TRUE, TRUE, TRUE,
                                    TRUE, TRUE, TRUE, TRUE,
                                    TRUE, TRUE, TRUE, TRUE,
                                    TRUE, TRUE
                                )
                            """),
                            {
                                "user_id": owner_id,
                                "project_id": project_id,
                                "granted_by_id": owner_id
                            }
                        )
                
                print("   ‚úÖ Permissions des propri√©taires cr√©√©es")
                
                # 3. V√©rifier et corriger les r√¥les utilisateur
                print("\n3. üë• V√©rification des r√¥les utilisateur...")
                
                # Compter les utilisateurs par r√¥le
                roles_result = conn.execute(text("SELECT role, COUNT(*) FROM users GROUP BY role"))
                role_counts = dict(roles_result.fetchall())
                
                print("   üìä R√©partition actuelle des r√¥les :")
                for role, count in role_counts.items():
                    print(f"      - {role}: {count}")
                
                # Corriger les r√¥les invalides (s'il y en a)
                invalid_roles = [role for role in role_counts.keys() if role not in ['admin', 'moderateur', 'utilisateur']]
                if invalid_roles:
                    print(f"   ‚ö†Ô∏è  R√¥les invalides d√©tect√©s : {invalid_roles}")
                    # Les convertir en 'utilisateur' par d√©faut
                    for invalid_role in invalid_roles:
                        conn.execute(
                            text("UPDATE users SET role = 'utilisateur' WHERE role = :invalid_role"),
                            {"invalid_role": invalid_role}
                        )
                    print("   ‚úÖ R√¥les invalides corrig√©s vers 'utilisateur'")
                
                # 4. Cr√©er un log de migration
                print("\n4. üìù Cr√©ation du log de migration...")
                
                conn.execute(
                    text("""
                        INSERT INTO security_logs (
                            event_type, user_email, ip_address, resource_type, action, 
                            success, additional_data, timestamp
                        ) VALUES (
                            'admin_access', 'system@agoraflux.fr', '127.0.0.1', 'system', 'security_migration',
                            TRUE, '{"migration": "simplified_roles", "version": "1.0"}', NOW()
                        )
                    """)
                )
                
                # Valider la transaction
                trans.commit()
                print("   ‚úÖ Migration termin√©e avec succ√®s")
                
            except Exception as e:
                trans.rollback()
                raise e
        
        # 5. V√©rifications post-migration
        print("\n5. üîç V√©rifications post-migration...")
        verify_migration(engine)
        
        print("\n" + "=" * 70)
        print("‚úÖ Syst√®me de s√©curit√© mis √† jour avec succ√®s !")
        print("\nüìã R√©sum√© des changements :")
        print("   ‚Ä¢ Syst√®me simplifi√© √† 3 r√¥les : admin/mod√©rateur/utilisateur")
        print("   ‚Ä¢ Permissions granulaires par projet")
        print("   ‚Ä¢ Journalisation des √©v√©nements de s√©curit√©")
        print("   ‚Ä¢ Audit automatique des acc√®s sensibles")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la migration : {str(e)}")
        return False


def verify_migration(engine):
    """
    V√©rifie que la migration s'est bien pass√©e
    """
    with engine.connect() as conn:
        # V√©rifier les permissions
        perm_count = conn.execute(text("SELECT COUNT(*) FROM project_permissions")).scalar()
        print(f"   üìä {perm_count} permission(s) de projet cr√©√©e(s)")
        
        # V√©rifier les r√¥les
        role_summary = conn.execute(text("""
            SELECT role, COUNT(*) 
            FROM project_permissions 
            GROUP BY role
        """)).fetchall()
        
        print("   üìã R√©partition des r√¥les de projet :")
        for role, count in role_summary:
            print(f"      - {role}: {count}")
        
        # V√©rifier les logs de s√©curit√©
        log_count = conn.execute(text("SELECT COUNT(*) FROM security_logs")).scalar()
        print(f"   üìù {log_count} entr√©e(s) dans les logs de s√©curit√©")
        
        # V√©rifier les r√¥les utilisateur
        user_roles = conn.execute(text("""
            SELECT role, COUNT(*) 
            FROM users 
            GROUP BY role
        """)).fetchall()
        
        print("   üë• R√©partition des r√¥les utilisateur :")
        for role, count in user_roles:
            print(f"      - {role}: {count}")


def create_security_documentation():
    """
    Affiche la documentation du nouveau syst√®me de s√©curit√©
    """
    print("\n" + "=" * 70)
    print("üìö DOCUMENTATION DU SYST√àME DE S√âCURIT√â")
    print("=" * 70)
    
    print("\nüîê R√îLES SIMPLIFI√âS :")
    print("   1. admin        ‚Üí Tous les droits sur la plateforme")
    print("   2. moderateur   ‚Üí Mod√©ration + acc√®s √©tendu")
    print("   3. utilisateur  ‚Üí Utilisateur standard")
    
    print("\nüõ°Ô∏è PERMISSIONS PAR PROJET :")
    print("   ‚Ä¢ admin     ‚Üí Gestion compl√®te du projet")
    print("   ‚Ä¢ moderator ‚Üí Mod√©ration + contribution")
    print("   ‚Ä¢ user      ‚Üí Lecture + contribution de base")
    
    print("\nüìä JOURNALISATION AUTOMATIQUE :")
    print("   ‚Ä¢ Connexions/d√©connexions")
    print("   ‚Ä¢ Acc√®s aux routes sensibles")
    print("   ‚Ä¢ Modifications de permissions")
    print("   ‚Ä¢ Actions administratives")
    
    print("\nüö® S√âCURIT√â RENFORC√âE :")
    print("   ‚Ä¢ Limitation des tentatives de connexion")
    print("   ‚Ä¢ D√©tection d'activit√©s suspectes")
    print("   ‚Ä¢ Audit automatique des acc√®s")
    print("   ‚Ä¢ Rate limiting par IP")
    
    print("\nüìã ROUTES S√âCURIS√âES :")
    print("   ‚Ä¢ /api/v1/auth/*         ‚Üí Authentification")
    print("   ‚Ä¢ /api/v1/admin/*        ‚Üí Administration") 
    print("   ‚Ä¢ /api/v1/permissions/*  ‚Üí Gestion permissions")
    print("   ‚Ä¢ /api/v1/exports/*      ‚Üí Exports de donn√©es")
    
    print("\nüí° PROCHAINES √âTAPES :")
    print("   1. Int√©grer les middlewares de s√©curit√©")
    print("   2. Configurer la journalisation")
    print("   3. Tester les permissions")
    print("   4. Former les utilisateurs")


def main():
    """
    Fonction principale
    """
    print("üöÄ MIGRATION SYST√àME DE S√âCURIT√â AGORAFLUX")
    print("Passage aux 3 r√¥les simplifi√©s + journalisation")
    print("=" * 70)
    
    # Demander confirmation
    response = input("Voulez-vous proc√©der √† la migration ? [y/N]: ")
    if response.lower() not in ['y', 'yes', 'oui']:
        print("‚ùå Migration annul√©e par l'utilisateur")
        return
    
    # Effectuer la migration
    success = update_security_system()
    
    if success:
        create_security_documentation()
        print("\nüéâ Migration termin√©e avec succ√®s !")
        print("Le syst√®me de s√©curit√© est maintenant conforme aux exigences.")
    else:
        print("\nüí• Migration √©chou√©e. V√©rifiez les logs d'erreur.")
        sys.exit(1)


if __name__ == "__main__":
    main() 