#!/usr/bin/env python3
"""
Script pour cr√©er la table des permissions de projet
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import create_engine, text
from app.core.config import settings
from app.core.database import Base
from app.models.permissions import ProjectPermission, ProjectRole
from app.models.user import User
from app.models.project import Project


def create_permissions_table():
    """
    Cr√©e la table des permissions et initialise les permissions pour les projets existants
    """
    print("üîß Cr√©ation de la table des permissions...")
    
    # Cr√©er le moteur de base de donn√©es
    engine = create_engine(settings.DATABASE_URL)
    
    try:
        # Cr√©er la table des permissions
        Base.metadata.create_all(bind=engine, tables=[ProjectPermission.__table__])
        print("‚úÖ Table project_permissions cr√©√©e avec succ√®s")
        
        # Initialiser les permissions pour les projets existants
        with engine.connect() as conn:
            # Commencer une transaction
            trans = conn.begin()
            
            try:
                # R√©cup√©rer tous les projets existants
                result = conn.execute(text("SELECT id, owner_id FROM projects"))
                projects = result.fetchall()
                
                print(f"üìä {len(projects)} projet(s) trouv√©(s)")
                
                # Cr√©er les permissions pour chaque propri√©taire de projet
                for project in projects:
                    project_id, owner_id = project
                    
                    # V√©rifier si une permission existe d√©j√†
                    check_result = conn.execute(
                        text("SELECT id FROM project_permissions WHERE user_id = :user_id AND project_id = :project_id"),
                        {"user_id": owner_id, "project_id": project_id}
                    )
                    
                    if check_result.fetchone() is None:
                        # Ins√©rer la permission du propri√©taire
                        conn.execute(
                            text("""
                                INSERT INTO project_permissions (
                                    user_id, project_id, role, granted_by_id, granted_at, is_active,
                                    can_view_project, can_view_datasets, can_view_comments, can_view_analytics,
                                    can_edit_project, can_delete_project, can_upload_datasets, can_delete_datasets,
                                    can_create_comments, can_edit_own_comments, can_delete_own_comments,
                                    can_moderate_comments, can_pin_comments, can_hide_comments,
                                    can_manage_permissions, can_invite_users, can_remove_users,
                                    can_export_data, can_generate_reports
                                ) VALUES (
                                    :user_id, :project_id, 'owner', :granted_by_id, NOW(), TRUE,
                                    TRUE, TRUE, TRUE, TRUE,
                                    TRUE, TRUE, TRUE, TRUE,
                                    TRUE, TRUE, TRUE,
                                    TRUE, TRUE, TRUE,
                                    TRUE, TRUE, TRUE,
                                    TRUE, TRUE
                                )
                            """),
                            {
                                "user_id": owner_id,
                                "project_id": project_id,
                                "granted_by_id": owner_id
                            }
                        )
                        
                        print(f"‚úÖ Permission cr√©√©e pour le projet {project_id} (propri√©taire: {owner_id})")
                
                # Valider la transaction
                trans.commit()
                print("‚úÖ Toutes les permissions ont √©t√© cr√©√©es avec succ√®s")
                
            except Exception as e:
                # Annuler la transaction en cas d'erreur
                trans.rollback()
                raise e
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des permissions: {str(e)}")
        return False
    
    return True


def verify_permissions():
    """
    V√©rifie que les permissions ont √©t√© cr√©√©es correctement
    """
    print("üîç V√©rification des permissions...")
    
    engine = create_engine(settings.DATABASE_URL)
    
    try:
        with engine.connect() as conn:
            # Compter les permissions
            result = conn.execute(text("SELECT COUNT(*) FROM project_permissions"))
            permission_count = result.scalar()
            
            # Compter les projets
            result = conn.execute(text("SELECT COUNT(*) FROM projects"))
            project_count = result.scalar()
            
            print(f"üìä {permission_count} permission(s) cr√©√©e(s) pour {project_count} projet(s)")
            
            # V√©rifier les r√¥les
            result = conn.execute(text("SELECT role, COUNT(*) FROM project_permissions GROUP BY role"))
            role_counts = result.fetchall()
            
            print("üìã R√©partition des r√¥les:")
            for role, count in role_counts:
                print(f"   - {role}: {count}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {str(e)}")
        return False


def main():
    """
    Fonction principale
    """
    print("üöÄ Initialisation du syst√®me de permissions granulaires")
    print("=" * 60)
    
    # Cr√©er les tables et permissions
    if create_permissions_table():
        print("\n" + "=" * 60)
        verify_permissions()
        print("\n‚úÖ Syst√®me de permissions initialis√© avec succ√®s!")
        print("\nüìñ Les propri√©taires de projets ont maintenant des permissions compl√®tes.")
        print("   Vous pouvez maintenant inviter d'autres utilisateurs avec des r√¥les sp√©cifiques.")
    else:
        print("\n‚ùå √âchec de l'initialisation du syst√®me de permissions")
        sys.exit(1)


if __name__ == "__main__":
    main() 