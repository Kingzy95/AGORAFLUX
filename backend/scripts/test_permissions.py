#!/usr/bin/env python3
"""
Script de test pour le syst√®me de permissions granulaires
"""

import sys
import os
import asyncio
from datetime import datetime, timedelta

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import sessionmaker
from app.core.database import engine
from app.models.user import User, UserRole
from app.models.project import Project, ProjectStatus, ProjectVisibility
from app.models.permissions import ProjectPermission, ProjectRole
from app.services.permission_service import PermissionService


# Cr√©er une session de base de donn√©es
SessionLocal = sessionmaker(bind=engine)


def test_permission_service():
    """
    Teste le service de permissions
    """
    print("üß™ Test du service de permissions")
    print("-" * 40)
    
    db = SessionLocal()
    
    try:
        permission_service = PermissionService(db)
        
        # 1. Cr√©er des utilisateurs de test
        print("1. Cr√©ation d'utilisateurs de test...")
        
        # Propri√©taire
        owner = User(
            email="owner@test.com",
            password_hash="hashed_password",
            first_name="Owner",
            last_name="Test",
            role=UserRole.USER,
            is_active=True,
            is_verified=True
        )
        db.add(owner)
        
        # Collaborateur
        collaborator = User(
            email="collaborator@test.com",
            password_hash="hashed_password",
            first_name="Collaborator",
            last_name="Test",
            role=UserRole.USER,
            is_active=True,
            is_verified=True
        )
        db.add(collaborator)
        
        # Viewer
        viewer = User(
            email="viewer@test.com",
            password_hash="hashed_password",
            first_name="Viewer",
            last_name="Test",
            role=UserRole.USER,
            is_active=True,
            is_verified=True
        )
        db.add(viewer)
        
        db.commit()
        db.refresh(owner)
        db.refresh(collaborator)
        db.refresh(viewer)
        
        print(f"   ‚úÖ Propri√©taire cr√©√©: {owner.email} (ID: {owner.id})")
        print(f"   ‚úÖ Collaborateur cr√©√©: {collaborator.email} (ID: {collaborator.id})")
        print(f"   ‚úÖ Viewer cr√©√©: {viewer.email} (ID: {viewer.id})")
        
        # 2. Cr√©er un projet de test
        print("\n2. Cr√©ation d'un projet de test...")
        
        project = Project(
            title="Projet de Test Permissions",
            slug="projet-test-permissions",
            description="Projet pour tester le syst√®me de permissions",
            owner_id=owner.id,
            status=ProjectStatus.ACTIVE,
            visibility=ProjectVisibility.PUBLIC,
            allow_comments=True,
            allow_contributions=True
        )
        db.add(project)
        db.commit()
        db.refresh(project)
        
        print(f"   ‚úÖ Projet cr√©√©: {project.title} (ID: {project.id})")
        
        # 3. Tester les permissions par d√©faut du propri√©taire
        print("\n3. Test des permissions par d√©faut du propri√©taire...")
        
        permission_service.grant_default_permissions(project)
        
        # V√©rifier les permissions du propri√©taire
        owner_permissions = permission_service.get_effective_permissions(owner, project)
        
        print(f"   ‚úÖ Propri√©taire a {sum(owner_permissions.values())} permissions accord√©es")
        
        # V√©rifications sp√©cifiques
        assert permission_service.check_permission(owner, project, "edit_project"), "Le propri√©taire doit pouvoir √©diter"
        assert permission_service.check_permission(owner, project, "delete_project"), "Le propri√©taire doit pouvoir supprimer"
        assert permission_service.check_permission(owner, project, "manage_permissions"), "Le propri√©taire doit pouvoir g√©rer les permissions"
        
        print("   ‚úÖ Toutes les permissions du propri√©taire sont correctes")
        
        # 4. Tester l'ajout de collaborateur
        print("\n4. Test d'ajout de collaborateur...")
        
        collab_permission = permission_service.create_project_permission(
            user_id=collaborator.id,
            project_id=project.id,
            role=ProjectRole.COLLABORATOR,
            granted_by_id=owner.id
        )
        
        print(f"   ‚úÖ Permission collaborateur cr√©√©e (ID: {collab_permission.id})")
        
        # V√©rifier les permissions du collaborateur
        assert permission_service.check_permission(collaborator, project, "edit_project"), "Le collaborateur doit pouvoir √©diter"
        assert not permission_service.check_permission(collaborator, project, "delete_project"), "Le collaborateur ne doit pas pouvoir supprimer"
        assert not permission_service.check_permission(collaborator, project, "manage_permissions"), "Le collaborateur ne doit pas pouvoir g√©rer les permissions"
        
        print("   ‚úÖ Permissions du collaborateur correctes")
        
        # 5. Tester l'ajout de viewer
        print("\n5. Test d'ajout de viewer...")
        
        viewer_permission = permission_service.create_project_permission(
            user_id=viewer.id,
            project_id=project.id,
            role=ProjectRole.VIEWER,
            granted_by_id=owner.id
        )
        
        print(f"   ‚úÖ Permission viewer cr√©√©e (ID: {viewer_permission.id})")
        
        # V√©rifier les permissions du viewer
        assert permission_service.check_permission(viewer, project, "view_project"), "Le viewer doit pouvoir voir"
        assert not permission_service.check_permission(viewer, project, "edit_project"), "Le viewer ne doit pas pouvoir √©diter"
        assert not permission_service.check_permission(viewer, project, "create_comments"), "Le viewer ne doit pas pouvoir commenter"
        
        print("   ‚úÖ Permissions du viewer correctes")
        
        # 6. Tester la mise √† jour de permissions
        print("\n6. Test de mise √† jour de permissions...")
        
        # Promouvoir le viewer en contributor
        updated_permission = permission_service.update_project_permission(
            user_id=viewer.id,
            project_id=project.id,
            role=ProjectRole.CONTRIBUTOR
        )
        
        print(f"   ‚úÖ Viewer promu en contributor")
        
        # V√©rifier les nouvelles permissions
        assert permission_service.check_permission(viewer, project, "create_comments"), "Le contributor doit pouvoir commenter"
        assert permission_service.check_permission(viewer, project, "upload_datasets"), "Le contributor doit pouvoir upload"
        assert not permission_service.check_permission(viewer, project, "edit_project"), "Le contributor ne doit pas pouvoir √©diter le projet"
        
        print("   ‚úÖ Mise √† jour des permissions r√©ussie")
        
        # 7. Tester les permissions avec expiration
        print("\n7. Test des permissions avec expiration...")
        
        # Cr√©er un utilisateur temporaire
        temp_user = User(
            email="temp@test.com",
            password_hash="hashed_password",
            first_name="Temp",
            last_name="User",
            role=UserRole.USER,
            is_active=True,
            is_verified=True
        )
        db.add(temp_user)
        db.commit()
        db.refresh(temp_user)
        
        # Cr√©er une permission qui expire dans 1 seconde (pour le test)
        temp_permission = permission_service.create_project_permission(
            user_id=temp_user.id,
            project_id=project.id,
            role=ProjectRole.VIEWER,
            granted_by_id=owner.id,
            expires_at=datetime.utcnow() + timedelta(seconds=1)
        )
        
        print(f"   ‚úÖ Permission temporaire cr√©√©e")
        
        # V√©rifier que la permission fonctionne initialement
        assert permission_service.check_permission(temp_user, project, "view_project"), "La permission temporaire doit fonctionner"
        
        # Attendre l'expiration
        import time
        time.sleep(2)
        
        # V√©rifier que la permission a expir√©
        assert not permission_service.check_permission(temp_user, project, "view_project"), "La permission doit avoir expir√©"
        
        print("   ‚úÖ Test d'expiration r√©ussi")
        
        # 8. Tester le nettoyage des permissions expir√©es
        print("\n8. Test du nettoyage des permissions expir√©es...")
        
        expired_count = permission_service.cleanup_expired_permissions()
        print(f"   ‚úÖ {expired_count} permission(s) expir√©e(s) nettoy√©e(s)")
        
        # 9. Tester le r√©sum√© des r√¥les
        print("\n9. Test du r√©sum√© des r√¥les...")
        
        role_summary = permission_service.get_project_role_summary(project.id)
        print(f"   ‚úÖ R√©sum√© des r√¥les: {role_summary}")
        
        # V√©rifications
        assert role_summary.get('owner', 0) == 1, "Doit avoir 1 owner"
        assert role_summary.get('collaborator', 0) == 1, "Doit avoir 1 collaborator"
        assert role_summary.get('contributor', 0) == 1, "Doit avoir 1 contributor"
        
        print("   ‚úÖ R√©sum√© des r√¥les correct")
        
        # 10. Nettoyer les donn√©es de test
        print("\n10. Nettoyage des donn√©es de test...")
        
        # Supprimer les permissions
        db.query(ProjectPermission).filter(ProjectPermission.project_id == project.id).delete()
        
        # Supprimer le projet
        db.delete(project)
        
        # Supprimer les utilisateurs
        db.delete(owner)
        db.delete(collaborator)
        db.delete(viewer)
        db.delete(temp_user)
        
        db.commit()
        
        print("   ‚úÖ Donn√©es de test nettoy√©es")
        
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur durant les tests: {str(e)}")
        db.rollback()
        return False
        
    finally:
        db.close()


def test_permission_api_endpoints():
    """
    Teste les endpoints API (simulation basique)
    """
    print("\nüåê Test des endpoints API")
    print("-" * 40)
    
    # Tests simul√©s des endpoints
    endpoints = [
        "GET /api/v1/permissions/projects/{project_id}/permissions",
        "POST /api/v1/permissions/projects/{project_id}/permissions/invite",
        "PUT /api/v1/permissions/projects/{project_id}/permissions/{user_id}",
        "DELETE /api/v1/permissions/projects/{project_id}/permissions/{user_id}",
        "GET /api/v1/permissions/projects/{project_id}/permissions/{user_id}/effective",
        "GET /api/v1/permissions/roles/permissions-matrix",
        "POST /api/v1/permissions/cleanup/expired-permissions"
    ]
    
    print("üìã Endpoints de permissions disponibles:")
    for endpoint in endpoints:
        print(f"   ‚úÖ {endpoint}")
    
    print("\nüîó Les endpoints sont configur√©s et pr√™ts √† √™tre test√©s")


def main():
    """
    Fonction principale de test
    """
    print("üß™ Tests du syst√®me de permissions granulaires")
    print("=" * 60)
    
    # Test du service
    service_success = test_permission_service()
    
    # Test des endpoints API
    test_permission_api_endpoints()
    
    print("\n" + "=" * 60)
    if service_success:
        print("‚úÖ Syst√®me de permissions test√© avec succ√®s!")
        print("\nüìñ Le syst√®me de permissions granulaires est op√©rationnel:")
        print("   - R√¥les par projet: OWNER, ADMIN, COLLABORATOR, CONTRIBUTOR, MODERATOR, VIEWER")
        print("   - Permissions d√©taill√©es pour chaque action")
        print("   - Support des permissions temporaires")
        print("   - API compl√®te pour la gestion des permissions")
    else:
        print("‚ùå Des erreurs ont √©t√© d√©tect√©es dans le syst√®me de permissions")
        sys.exit(1)


if __name__ == "__main__":
    main() 